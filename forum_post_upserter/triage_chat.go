package forumpostupserter

import (
	"context"
	"fmt"

	"encore.app/discord_handler"
	"encore.app/models"
	"encore.app/packages/llmservice"
	"encore.dev/pubsub"
	"encore.dev/rlog"
	"github.com/bwmarrin/discordgo"
)

var secrets struct {
	DiscordToken string
}

// #support
const forumChannelID = "1233297799366311977"

// Service for upserting messages posted on a text channel as forum posts
// if they match a set of predefined topics
type Service struct {
	llmService    *llmservice.Service
	discordClient *discordgo.Session
}

func initService() (*Service, error) {
	llmService, err := llmservice.NewService()
	if err != nil {
		return nil, fmt.Errorf("couldn't create llm service: %w", err)
	}

	discordClient, err := discordgo.New("Bot " + secrets.DiscordToken)
	if err != nil {
		return nil, fmt.Errorf("couldn't create discord client: %w", err)
	}

	return &Service{llmService: llmService, discordClient: discordClient}, nil
}

var _ = pubsub.NewSubscription(
	discord_handler.DiscordRawMessageTopic,
	"forum-post-upserter",
	pubsub.SubscriptionConfig[*models.DiscordRawMessage]{
		Handler: func(ctx context.Context, message *models.DiscordRawMessage) error {
			rlog.Info("Received raw discord message", "discordMessage", message)
			service, err := initService()
			if err != nil {
				return fmt.Errorf("couldn't create service: %w", err)
			}

			return service.TriageDiscordMessage(ctx, message)
		},
	})

func (s *Service) TriageDiscordMessage(ctx context.Context, message *models.DiscordRawMessage) error {
	discordChannel, err := s.discordClient.Channel(message.ChannelID)
	if err != nil {
		return fmt.Errorf("couldn't get discord channel: %w", err)
	}

	rlog.Info("channel ID", "channelID", message.ChannelID, "parentId", discordChannel.ParentID)
	if discordChannel.Type != discordgo.ChannelTypeGuildText {
		rlog.Warn("Ignoring message for non-text channel", "channelName", discordChannel.Name)
		return nil
	}

	rlog.Info("Handling message", "messageId", message.ID, "channelName", discordChannel.Name)
	topic, err := s.llmService.TriageMessageTopic(ctx, message.CleanContent)
	if err != nil {
		return fmt.Errorf("couldn't triage message topic: %w", err)
	}

	rlog.Info("Triage topic result", "result", topic)
	if topic == "other" {
		rlog.Info("Ignoring message for topic 'other'")
		return nil
	}

	forumPostTitle, err := s.llmService.SuggestTitleForMessage(ctx, message.CleanContent)
	if err != nil {
		return fmt.Errorf("couldn't suggest title for message: %w", err)
	}

	_, err = s.discordClient.ForumThreadStart(
		forumChannelID, forumPostTitle, 0, formatAutoGeneratedForumPostMessage(message))
	if err != nil {
		return fmt.Errorf("couldn't send message to forum channel: %w", err)
	}

	return nil
}

func formatAutoGeneratedForumPostMessage(message *models.DiscordRawMessage) string {
	return fmt.Sprintf("New support request by <@%s> in <#%s>:\n---\n%s\n---\n\nPlease provide any other relevant info in this post...", message.AuthorID, message.ChannelID, message.CleanContent)
}
